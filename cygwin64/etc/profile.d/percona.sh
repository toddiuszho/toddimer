#!/bin/bash

#
# percona.sh: functions wrapped around Percona toolkit
#

source /etc/profile.d/p4.sh

#
# Backup MySQL grants. Creates a file under the appropriate node directory using
# the short name of the MySQL instance and versions it in Perforce.
#
# Arguments:
#   1 - (Optional) socket suffix to connect to. Defaults to empty suffix.
#   2 - (Optional) short description of MySQL instance. Defaults to "3306"
#
function pt-backup-grants()
{
  echo -e "\n--------------------\n\$USER=$USER, date="`date -d "now"`"\n--------------------" >&2

  # Handle arguments
  _sock=${1:-""}
  _port=${1:-"3306"}
  _grants_file="$_port-grants.sql"
  _grants_file_path="/opt/depot/nodes/$P4NODE/$_grants_file"
  _grants_file_filespec="//depot/nodes/$P4NODE/$_grants_file"
  _description="Nightly MySQL grants backup for $P4NODE:$_port"
  shift 1

  # Verify password file
  if ! [ -f /root/p4passwd ]; then
    echo "No P4 password file found!" >&2
    return 1
  fi
 
  # Create grants file if first time
  if ! [ -f "$_grants_file_path" ]; then
    touch "$_grants_file_path"
    if [ $? -ne 0 ]; then
      echo "Could not create file: $_grants_file_path" >&2
      return 1
    fi
  fi

  # Login
  cat /root/p4passwd | command p4 login
  if [ $? -ne 0 ]; then
    echo "Could not login!" >&2
    return 1
  fi

  # Versioning setup
  _cl=`p4-new-changelist "$_description"`
  echo "Changelist#: $_cl"
  if [ -z "$_cl" ]; then
    echo "Could not create changelist!" >&2
    return 1
  fi
  p4-add-or-edit $_cl "$_grants_file_filespec"

  # Grab grants
  capture=$(pt-show-grants --socket=/var/lib/mysql/mysql$_sock.sock "$@" 2>&1)
  if [ $? -ne 0 ]; then
    echo "Could not get grants!" >&2
    echo "$capture" >&2
    p4 revert "$_grants_file_filespec"
    p4 change -d $_cl
    return 1
  fi
  echo "$capture" | remove-identified-clause 2>&1 > "$_grants_file_path"

  # Submit
  p4 submit -c $_cl
  return $?
}

#
# Print all MySQL grants for a single user
# 
# Arguments:
#   1 - (Required) name of user to get grants for
#   2 - (Optional) socket suffix for MySQL instance to connect to. Defaults to empty suffix
#
function pt-user-grants()
{
  # Validate user
  user="$1"
  if [ "$1x" = "x" ]; then
    echo "No user specified!" >&2
    return 1
  fi

  # Setup socket
  sock=${2:-""}

  # Pipe all grants to single user grab
  _grab-user-grants $user < <(pt-show-grants --socket=/var/lib/mysql/mysql$sock.sock)
}

#
# Filters grants on stdin to only show passed in user. 
# Assumes stdin generated by pt-show-grants.
#
# Arguments:
#   1 - (Required) name of user to grab grants for
#
function _grab-user-grants
{
  user="$1"
  header="\-\- Grants for "
  declare -i capturing=0
  while read line; do
    echo "$line" | grep -q "$header"
    if [ $? -eq 0 ]; then
      if [ $capturing -eq 1 ]; then
        return 0;
      else
        echo "$line" | grep -q "$user"
        if [ $? -eq 0 ]; then
          capturing=1
          echo "$line"
        fi
      fi
    else
      if [ $capturing -eq 1 ]; then
        echo "$line" | remove-identified-clause
      fi
    fi
  done
}

#
# Removes from stdin "IDENTIFIED BY PASSWORD '[^\']+'".
# This is the only drawback to pt-show-grants
#
function remove-identified-clause()
{
  sed 's/ IDENTIFIED BY PASSWORD '"'"'[\*A-Z0-9]*'"'"'//g'
}

